[
    {
        "name": "dbo.Addresses",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[Addresses] (\r\n    [AddressID] [int] IDENTITY(1,1) NOT NULL,\r\n    [CustomerID] [int] NOT NULL,\r\n    [AddressType] [nvarchar](50) NOT NULL CHECK ([AddressType]='Previous' OR [AddressType]='Mailing' OR [AddressType]='Shipping' OR [AddressType]='Billing'),\r\n    [StreetAddress] [nvarchar](255) NOT NULL,\r\n    [City] [nvarchar](100) NOT NULL,\r\n    [StateProvince] [nvarchar](100) NULL,\r\n    [PostalCode] [nvarchar](20) NOT NULL,\r\n    [Country] [nvarchar](100) NOT NULL,\r\n    [IsPrimary] [bit] NOT NULL DEFAULT ((0)),\r\n    [DateCreated] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    CONSTRAINT [PK__Addresse__091C2A1BB115FCF5] PRIMARY KEY CLUSTERED ([AddressID] ASC)\r\n)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_Addresses_CustomerID] ON [dbo].[Addresses] ([CustomerID] ASC)\r\nGO\r\n\r\nALTER TABLE [dbo].[Addresses] WITH CHECK ADD CONSTRAINT [FK_Addresses_Customers] FOREIGN KEY ([CustomerID]) REFERENCES [dbo].[Customers] ([CustomerID]) ON DELETE CASCADE\r\nGO\r\n"
    },
    {
        "name": "dbo.ApprovalDecisions",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[ApprovalDecisions] (\r\n    [ApprovalDecisionID] [int] IDENTITY(1,1) NOT NULL,\r\n    [LoanApplicationID] [int] NOT NULL,\r\n    [Decision] [varchar](20) NOT NULL CHECK ([Decision]='Manual Review' OR [Decision]='Rejected' OR [Decision]='Approved'),\r\n    [DecisionDate] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    [DecisionBy] [nvarchar](128) NULL,\r\n    [Reason] [nvarchar](1000) NULL,\r\n    [ApprovedAmount] [decimal](18, 2) NULL,\r\n    [ApprovedRate] [decimal](5, 4) NULL,\r\n    [ApprovedTerm] [int] NULL,\r\n    CONSTRAINT [PK__Approval__F2F287C8B1D741B8] PRIMARY KEY CLUSTERED ([ApprovalDecisionID] ASC)\r\n)\r\nGO\r\n\r\nCREATE UNIQUE NONCLUSTERED INDEX [IX_ApprovalDecisions_LoanApplicationID] ON [dbo].[ApprovalDecisions] ([LoanApplicationID] ASC)\r\nGO\r\n\r\nALTER TABLE [dbo].[ApprovalDecisions] WITH CHECK ADD CONSTRAINT [FK_ApprovalDecisions_LoanApplications] FOREIGN KEY ([LoanApplicationID]) REFERENCES [dbo].[LoanApplications] ([LoanApplicationID])\r\nGO\r\n"
    },
    {
        "name": "dbo.Collaterals",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[Collaterals] (\r\n    [CollateralID] [int] IDENTITY(1,1) NOT NULL,\r\n    [LoanApplicationID] [int] NOT NULL,\r\n    [Description] [nvarchar](255) NOT NULL,\r\n    [CollateralType] [varchar](50) NOT NULL,\r\n    [EstimatedValue] [decimal](18, 2) NOT NULL,\r\n    [ValueSource] [nvarchar](100) NULL,\r\n    [VerificationDate] [datetime2](3) NULL,\r\n    [DateAdded] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    CONSTRAINT [PK__Collater__BB1A1FBCD1DCD2E1] PRIMARY KEY CLUSTERED ([CollateralID] ASC)\r\n)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_Collaterals_LoanApplicationID] ON [dbo].[Collaterals] ([LoanApplicationID] ASC)\r\nGO\r\n\r\nALTER TABLE [dbo].[Collaterals] WITH CHECK ADD CONSTRAINT [FK_Collaterals_LoanApplications] FOREIGN KEY ([LoanApplicationID]) REFERENCES [dbo].[LoanApplications] ([LoanApplicationID]) ON DELETE CASCADE\r\nGO\r\n"
    },
    {
        "name": "dbo.CommunicationPreferences",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[CommunicationPreferences] (\r\n    [PreferenceID] [int] IDENTITY(1,1) NOT NULL,\r\n    [CustomerID] [int] NOT NULL,\r\n    [Channel] [varchar](20) NOT NULL CHECK ([Channel]='Phone' OR [Channel]='Post' OR [Channel]='SMS' OR [Channel]='Email'),\r\n    [OptInStatus] [bit] NOT NULL,\r\n    [LastChangedDate] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    [Source] [nvarchar](100) NULL,\r\n    CONSTRAINT [UK_CommunicationPreferences_CustomerChannel] UNIQUE NONCLUSTERED ([CustomerID] ASC, [Channel] ASC),\r\n    CONSTRAINT [PK__Communic__E228490FDB39BB85] PRIMARY KEY CLUSTERED ([PreferenceID] ASC)\r\n)\r\nGO\r\n\r\nALTER TABLE [dbo].[CommunicationPreferences] WITH CHECK ADD CONSTRAINT [FK_CommunicationPreferences_Customers] FOREIGN KEY ([CustomerID]) REFERENCES [dbo].[Customers] ([CustomerID]) ON DELETE CASCADE\r\nGO\r\n"
    },
    {
        "name": "dbo.CreditScores",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[CreditScores] (\r\n    [CreditScoreID] [int] IDENTITY(1,1) NOT NULL,\r\n    [CustomerID] [int] NOT NULL,\r\n    [Provider] [nvarchar](50) NOT NULL,\r\n    [Score] [int] NOT NULL,\r\n    [DateChecked] [date] NOT NULL,\r\n    [ReportData] [xml] NULL,\r\n    [BankruptciesLast5Years] [int] NULL,\r\n    [DelinquenciesLast2Years] [int] NULL,\r\n    [DateRetrieved] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    CONSTRAINT [PK__CreditSc__145DECE5404C2CF4] PRIMARY KEY CLUSTERED ([CreditScoreID] ASC)\r\n)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_CreditScores_CustomerID_DateChecked] ON [dbo].[CreditScores] ([CustomerID] ASC, [DateChecked] DESC)\r\nGO\r\n\r\nALTER TABLE [dbo].[CreditScores] WITH CHECK ADD CONSTRAINT [FK_CreditScores_Customers] FOREIGN KEY ([CustomerID]) REFERENCES [dbo].[Customers] ([CustomerID]) ON DELETE CASCADE\r\nGO\r\n"
    },
    {
        "name": "dbo.Customers",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[Customers] (\r\n    [CustomerID] [int] IDENTITY(1,1) NOT NULL,\r\n    [FirstName] [nvarchar](100) NOT NULL,\r\n    [LastName] [nvarchar](100) NOT NULL,\r\n    [Email] [nvarchar](255) NOT NULL,\r\n    [Phone] [nvarchar](30) NULL,\r\n    [DateRegistered] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    CONSTRAINT [PK__Customer__A4AE64B898F340F8] PRIMARY KEY CLUSTERED ([CustomerID] ASC)\r\n)\r\nGO\r\n\r\nCREATE UNIQUE NONCLUSTERED INDEX [IX_Customers_Email] ON [dbo].[Customers] ([Email] ASC)\r\nGO\r\n"
    },
    {
        "name": "dbo.EmploymentHistory",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[EmploymentHistory] (\r\n    [EmploymentHistoryID] [int] IDENTITY(1,1) NOT NULL,\r\n    [CustomerID] [int] NOT NULL,\r\n    [EmployerName] [nvarchar](200) NOT NULL,\r\n    [JobTitle] [nvarchar](100) NULL,\r\n    [EmploymentStatus] [varchar](50) NOT NULL CHECK ([EmploymentStatus]='Unemployed' OR [EmploymentStatus]='Retired' OR [EmploymentStatus]='Self-Employed' OR [EmploymentStatus]='Employed'),\r\n    [StartDate] [date] NOT NULL,\r\n    [EndDate] [date] NULL,\r\n    [IsCurrent] [bit] AS (CONVERT([bit],case when [EndDate] IS NULL then (1) else (0) end)),\r\n    [VerificationDate] [datetime2](3) NULL,\r\n    [VerificationSource] [nvarchar](100) NULL,\r\n    [DateAdded] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    CONSTRAINT [PK__Employme__850EEBBE31A65E3B] PRIMARY KEY CLUSTERED ([EmploymentHistoryID] ASC)\r\n)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_EmploymentHistory_CustomerID_IsCurrent] ON [dbo].[EmploymentHistory] ([CustomerID] ASC, [IsCurrent] DESC)\r\nGO\r\n\r\nALTER TABLE [dbo].[EmploymentHistory] WITH CHECK ADD CONSTRAINT [FK_EmploymentHistory_Customers] FOREIGN KEY ([CustomerID]) REFERENCES [dbo].[Customers] ([CustomerID]) ON DELETE CASCADE\r\nGO\r\n"
    },
    {
        "name": "dbo.FraudFlags",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[FraudFlags] (\r\n    [FraudFlagID] [int] IDENTITY(1,1) NOT NULL,\r\n    [CustomerID] [int] NOT NULL,\r\n    [LoanApplicationID] [int] NULL,\r\n    [FlagType] [varchar](100) NOT NULL,\r\n    [Severity] [varchar](20) NOT NULL CHECK ([Severity]='Critical' OR [Severity]='High' OR [Severity]='Medium' OR [Severity]='Low'),\r\n    [Details] [nvarchar](1000) NULL,\r\n    [IsActive] [bit] NOT NULL DEFAULT ((1)),\r\n    [DateRaised] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    [ResolvedDate] [datetime2](3) NULL,\r\n    [ResolvedBy] [nvarchar](128) NULL,\r\n    CONSTRAINT [PK__FraudFla__F9CF2FB240393589] PRIMARY KEY CLUSTERED ([FraudFlagID] ASC)\r\n)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_FraudFlags_CustomerID_IsActive] ON [dbo].[FraudFlags] ([CustomerID] ASC, [IsActive] ASC)\r\nGO\r\n\r\nALTER TABLE [dbo].[FraudFlags] WITH CHECK ADD CONSTRAINT [FK_FraudFlags_Customers] FOREIGN KEY ([CustomerID]) REFERENCES [dbo].[Customers] ([CustomerID])\r\nGO\r\n\r\nALTER TABLE [dbo].[FraudFlags] WITH CHECK ADD CONSTRAINT [FK_FraudFlags_LoanApplications] FOREIGN KEY ([LoanApplicationID]) REFERENCES [dbo].[LoanApplications] ([LoanApplicationID])\r\nGO\r\n"
    },
    {
        "name": "dbo.IncomeVerifications",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[IncomeVerifications] (\r\n    [IncomeVerificationID] [int] IDENTITY(1,1) NOT NULL,\r\n    [CustomerID] [int] NOT NULL,\r\n    [LoanApplicationID] [int] NULL,\r\n    [Source] [nvarchar](100) NOT NULL,\r\n    [ReportedAmount] [decimal](18, 2) NOT NULL,\r\n    [Frequency] [varchar](20) NOT NULL CHECK ([Frequency]='Weekly' OR [Frequency]='BiWeekly' OR [Frequency]='Monthly' OR [Frequency]='Annual'),\r\n    [VerifiedAmount] [decimal](18, 2) NULL,\r\n    [MonthlyAmount] [numeric](28, 8) AS (case [Frequency] when 'Annual' then [VerifiedAmount]/(12.0) when 'Monthly' then [VerifiedAmount] when 'BiWeekly' then [VerifiedAmount]*((26.0)/(12.0)) when 'Weekly' then [VerifiedAmount]*((52.0)/(12.0))  end),\r\n    [Status] [varchar](20) NOT NULL CHECK ([Status]='Expired' OR [Status]='Unverifiable' OR [Status]='Verified' OR [Status]='Pending'),\r\n    [VerificationDate] [datetime2](3) NULL,\r\n    [VerifiedBy] [nvarchar](128) NULL,\r\n    [DateAdded] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    CONSTRAINT [PK__IncomeVe__FC9B0D1A3613CEB2] PRIMARY KEY CLUSTERED ([IncomeVerificationID] ASC)\r\n)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_IncomeVerifications_CustomerID_VerificationDate] ON [dbo].[IncomeVerifications] ([CustomerID] ASC, [VerificationDate] DESC)\r\nGO\r\n\r\nALTER TABLE [dbo].[IncomeVerifications] WITH CHECK ADD CONSTRAINT [FK_IncomeVerifications_Customers] FOREIGN KEY ([CustomerID]) REFERENCES [dbo].[Customers] ([CustomerID]) ON DELETE CASCADE\r\nGO\r\n\r\nALTER TABLE [dbo].[IncomeVerifications] WITH CHECK ADD CONSTRAINT [FK_IncomeVerifications_LoanApplications] FOREIGN KEY ([LoanApplicationID]) REFERENCES [dbo].[LoanApplications] ([LoanApplicationID])\r\nGO\r\n"
    },
    {
        "name": "dbo.LoanApplications",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[LoanApplications] (\r\n    [LoanApplicationID] [int] IDENTITY(1,1) NOT NULL,\r\n    [CustomerID] [int] NOT NULL,\r\n    [ProposedLoanProductID] [int] NULL,\r\n    [RequestedAmount] [decimal](18, 2) NOT NULL,\r\n    [LoanPurpose] [nvarchar](200) NOT NULL,\r\n    [Status] [nvarchar](50) NOT NULL CHECK ([Status]='Withdrawn' OR [Status]='Rejected' OR [Status]='Approved' OR [Status]='Under Review' OR [Status]='Pending Docs' OR [Status]='Submitted' OR [Status]='Draft'),\r\n    [ApplicationDate] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    [SubmittedDate] [datetime2](3) NULL,\r\n    [LastUpdatedDate] [datetime2](3) NULL,\r\n    CONSTRAINT [PK__LoanAppl__F60027DD3CB24CDE] PRIMARY KEY CLUSTERED ([LoanApplicationID] ASC)\r\n)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_LoanApplications_CustomerID] ON [dbo].[LoanApplications] ([CustomerID] ASC)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_LoanApplications_Status] ON [dbo].[LoanApplications] ([Status] ASC)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_LoanApplications_ApplicationDate] ON [dbo].[LoanApplications] ([ApplicationDate] ASC)\r\nGO\r\n\r\nALTER TABLE [dbo].[LoanApplications] WITH CHECK ADD CONSTRAINT [FK_LoanApplications_Customers] FOREIGN KEY ([CustomerID]) REFERENCES [dbo].[Customers] ([CustomerID])\r\nGO\r\n\r\nALTER TABLE [dbo].[LoanApplications] WITH CHECK ADD CONSTRAINT [FK_LoanApplications_LoanProducts] FOREIGN KEY ([ProposedLoanProductID]) REFERENCES [dbo].[LoanProducts] ([LoanProductID])\r\nGO\r\n"
    },
    {
        "name": "dbo.LoanPayments",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[LoanPayments] (\r\n    [LoanPaymentID] [bigint] IDENTITY(1,1) NOT NULL,\r\n    [LoanID] [int] NOT NULL,\r\n    [PaymentDate] [datetime2](3) NOT NULL,\r\n    [AmountPaid] [decimal](18, 2) NOT NULL,\r\n    [PaymentMethod] [varchar](50) NULL,\r\n    [TransactionID] [nvarchar](255) NULL,\r\n    [PrincipalComponent] [decimal](18, 2) NOT NULL DEFAULT ((0)),\r\n    [InterestComponent] [decimal](18, 2) NOT NULL DEFAULT ((0)),\r\n    [EscrowComponent] [decimal](18, 2) NULL,\r\n    [FeeComponent] [decimal](18, 2) NULL,\r\n    [Notes] [nvarchar](500) NULL,\r\n    [DateRecorded] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    CONSTRAINT [PK__LoanPaym__5BA74D5C5A5A2919] PRIMARY KEY CLUSTERED ([LoanPaymentID] ASC)\r\n)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_LoanPayments_LoanID_PaymentDate] ON [dbo].[LoanPayments] ([LoanID] ASC, [PaymentDate] DESC)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_LoanPayments_PaymentDate] ON [dbo].[LoanPayments] ([PaymentDate] ASC)\r\nGO\r\n\r\nALTER TABLE [dbo].[LoanPayments] WITH CHECK ADD CONSTRAINT [FK_LoanPayments_Loans] FOREIGN KEY ([LoanID]) REFERENCES [dbo].[Loans] ([LoanID]) ON DELETE CASCADE\r\nGO\r\n"
    },
    {
        "name": "dbo.LoanProducts",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[LoanProducts] (\r\n    [LoanProductID] [int] IDENTITY(1,1) NOT NULL,\r\n    [Name] [nvarchar](150) NOT NULL,\r\n    [ProductType] [nvarchar](50) NOT NULL,\r\n    [Description] [nvarchar](1000) NULL,\r\n    [InterestRate] [decimal](5, 4) NOT NULL,\r\n    [TermMonths] [int] NOT NULL,\r\n    [RequiresCollateral] [bit] NOT NULL DEFAULT ((0)),\r\n    [MinCreditScoreRequired] [int] NULL,\r\n    [MaxDTIPercent] [decimal](5, 2) NULL,\r\n    [MaxLTVPercent] [decimal](5, 2) NULL,\r\n    [MinAmount] [decimal](18, 2) NULL,\r\n    [MaxAmount] [decimal](18, 2) NULL,\r\n    [IsActive] [bit] NOT NULL DEFAULT ((1)),\r\n    CONSTRAINT [PK__LoanProd__0D22CCE219183859] PRIMARY KEY CLUSTERED ([LoanProductID] ASC)\r\n)\r\nGO\r\n"
    },
    {
        "name": "dbo.Loans",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[Loans] (\r\n    [LoanID] [int] IDENTITY(1,1) NOT NULL,\r\n    [CustomerID] [int] NOT NULL,\r\n    [LoanApplicationID] [int] NOT NULL,\r\n    [LoanProductID] [int] NOT NULL,\r\n    [PrincipalAmount] [decimal](18, 2) NOT NULL,\r\n    [InterestRate] [decimal](5, 4) NOT NULL,\r\n    [TermMonths] [int] NOT NULL,\r\n    [MonthlyPaymentAmount] [decimal](18, 2) NOT NULL,\r\n    [Status] [varchar](50) NOT NULL CHECK ([Status]='Charged Off' OR [Status]='Defaulted' OR [Status]='Paid Off' OR [Status]='Active'),\r\n    [StartDate] [date] NOT NULL,\r\n    [ExpectedEndDate] [date] NOT NULL,\r\n    [PaidOffDate] [date] NULL,\r\n    [DateCreated] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    CONSTRAINT [PK__Loans__4F5AD4374B8CA696] PRIMARY KEY CLUSTERED ([LoanID] ASC)\r\n)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_Loans_CustomerID_Status] ON [dbo].[Loans] ([CustomerID] ASC, [Status] ASC)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_Loans_Status_StartDate] ON [dbo].[Loans] ([Status] ASC, [StartDate] ASC)\r\nGO\r\n\r\nALTER TABLE [dbo].[Loans] WITH CHECK ADD CONSTRAINT [FK_Loans_Customers] FOREIGN KEY ([CustomerID]) REFERENCES [dbo].[Customers] ([CustomerID])\r\nGO\r\n\r\nALTER TABLE [dbo].[Loans] WITH CHECK ADD CONSTRAINT [FK_Loans_LoanApplications] FOREIGN KEY ([LoanApplicationID]) REFERENCES [dbo].[LoanApplications] ([LoanApplicationID])\r\nGO\r\n\r\nALTER TABLE [dbo].[Loans] WITH CHECK ADD CONSTRAINT [FK_Loans_LoanProducts] FOREIGN KEY ([LoanProductID]) REFERENCES [dbo].[LoanProducts] ([LoanProductID])\r\nGO\r\n"
    },
    {
        "name": "dbo.MarketingEmailsSent",
        "type": "TABLE",
        "definition": "SET ANSI_NULLS ON\r\nGO\r\nSET QUOTED_IDENTIFIER ON\r\nGO\r\nCREATE TABLE [dbo].[MarketingEmailsSent] (\r\n    [EmailLogID] [bigint] IDENTITY(1,1) NOT NULL,\r\n    [CustomerID] [int] NOT NULL,\r\n    [SentToEmailAddress] [nvarchar](255) NOT NULL,\r\n    [CampaignID] [varchar](100) NOT NULL,\r\n    [SubjectLine] [nvarchar](500) NULL,\r\n    [SentDate] [datetime2](3) NOT NULL DEFAULT (getutcdate()),\r\n    [WasOpened] [bit] NOT NULL DEFAULT ((0)),\r\n    [OpenedDate] [datetime2](3) NULL,\r\n    [WasClicked] [bit] NOT NULL DEFAULT ((0)),\r\n    [ClickedDate] [datetime2](3) NULL,\r\n    CONSTRAINT [PK__Marketin__E8CB41EC81548152] PRIMARY KEY CLUSTERED ([EmailLogID] ASC)\r\n)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_MarketingEmailsSent_CustomerID_SentDate] ON [dbo].[MarketingEmailsSent] ([CustomerID] ASC, [SentDate] DESC)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_MarketingEmailsSent_SentDate] ON [dbo].[MarketingEmailsSent] ([SentDate] ASC)\r\nGO\r\n\r\nCREATE NONCLUSTERED INDEX [IX_MarketingEmailsSent_CampaignID] ON [dbo].[MarketingEmailsSent] ([CampaignID] ASC)\r\nGO\r\n\r\nALTER TABLE [dbo].[MarketingEmailsSent] WITH CHECK ADD CONSTRAINT [FK_MarketingEmailsSent_Customers] FOREIGN KEY ([CustomerID]) REFERENCES [dbo].[Customers] ([CustomerID])\r\nGO\r\n"
    },
    {
        "name": "dbo.usp_BuildCustomerCommsProfile",
        "type": "PROCEDURE",
        "definition": "CREATE PROCEDURE usp_BuildCustomerCommsProfile (\r\n    @CustomerID INT = NULL -- Optional: Process for a single customer\r\n)\r\nAS\r\nBEGIN\r\n    SET NOCOUNT ON;\r\n\r\n    DECLARE @Today DATE = CONVERT(DATE, GETDATE()); -- Use consistent date for calculations\r\n    DECLARE @MarketingOpenLookbackDays INT = 90; -- How far back to check for email opens\r\n\r\n    -- Common Table Expressions (CTEs) for Extraction and initial Transformation\r\n\r\n    -- 1. Base set of customers to process\r\n    WITH BaseCustomers AS (\r\n        SELECT\r\n            c.CustomerID,\r\n            c.FirstName,\r\n            c.LastName,\r\n            c.Email AS PrimaryEmail -- Assuming this is the primary email\r\n        FROM dbo.Customers c\r\n        WHERE (@CustomerID IS NULL OR c.CustomerID = @CustomerID) -- Filter if specific customer requested\r\n    ),\r\n\r\n    -- 2. Check for existence of a primary mailing address\r\n    PrimaryAddresses AS (\r\n        SELECT\r\n            a.CustomerID,\r\n            MAX(CASE WHEN a.AddressType IN ('Billing', 'Shipping') -- Define what constitutes 'Primary'\r\n                     AND a.StreetAddress IS NOT NULL AND a.City IS NOT NULL\r\n                     AND a.PostalCode IS NOT NULL AND a.Country IS NOT NULL\r\n                     THEN 1 ELSE 0 END) AS HasMailingAddress\r\n        FROM dbo.Addresses a\r\n        WHERE (@CustomerID IS NULL OR a.CustomerID = @CustomerID)\r\n        GROUP BY a.CustomerID\r\n    ),\r\n\r\n    -- 3. Find the latest interaction date across various activities\r\n    LastActivityDates AS (\r\n        SELECT\r\n            CustomerID,\r\n            MAX(ActivityDate) AS LastInteractionDate\r\n        FROM (\r\n            -- Last loan application date\r\n            SELECT CustomerID, MAX(ApplicationDate) AS ActivityDate FROM dbo.LoanApplications WHERE (@CustomerID IS NULL OR CustomerID = @CustomerID) GROUP BY CustomerID\r\n            UNION ALL\r\n            -- Last active loan start date\r\n            SELECT CustomerID, MAX(StartDate) AS ActivityDate FROM dbo.Loans WHERE Status = 'Active' AND (@CustomerID IS NULL OR CustomerID = @CustomerID) GROUP BY CustomerID\r\n            UNION ALL\r\n            -- Last payment received date\r\n            SELECT l.CustomerID, MAX(lp.PaymentDate) AS ActivityDate FROM dbo.LoanPayments lp JOIN dbo.Loans l ON lp.LoanID = l.LoanID WHERE (@CustomerID IS NULL OR l.CustomerID = @CustomerID) GROUP BY l.CustomerID\r\n            -- UNION ALL -- Add other sources like last login, last support ticket etc. if available\r\n        ) AS ActivitySources\r\n        GROUP BY CustomerID\r\n    ),\r\n\r\n    -- 4. Get explicit communication preferences (handling missing preferences)\r\n    CommunicationPrefs AS (\r\n        SELECT\r\n            cp.CustomerID,\r\n            MAX(CASE WHEN cp.Channel = 'Email' AND cp.OptInStatus = 1 THEN 1 ELSE 0 END) AS EmailOptInExplicit,\r\n            MAX(CASE WHEN cp.Channel = 'Post' AND cp.OptInStatus = 1 THEN 1 ELSE 0 END) AS PostalOptInExplicit\r\n        FROM dbo.CommunicationPreferences cp -- Hypothetical Table\r\n        WHERE (@CustomerID IS NULL OR cp.CustomerID = @CustomerID)\r\n        GROUP BY cp.CustomerID\r\n    ),\r\n\r\n    -- 5. Check if the customer has opened any marketing email recently\r\n    RecentMarketingOpens AS (\r\n        SELECT\r\n            mes.CustomerID,\r\n            MAX(CAST(mes.WasOpened AS INT)) AS OpenedMarketingEmailRecently -- Explicitly convert bit to int\r\n        FROM dbo.MarketingEmailsSent mes -- Hypothetical Table\r\n        WHERE mes.SentDate >= DATEADD(day, -@MarketingOpenLookbackDays, @Today)\r\n          AND (@CustomerID IS NULL OR mes.CustomerID = @CustomerID)\r\n        GROUP BY mes.CustomerID\r\n    ),\r\n\r\n    -- 6. Determine if the customer currently has an active loan\r\n    ActiveStatus AS (\r\n        SELECT\r\n            l.CustomerID,\r\n            MAX(CASE WHEN l.Status = 'Active' THEN 1 ELSE 0 END) AS IsActiveCustomer\r\n        FROM dbo.Loans l\r\n        WHERE (@CustomerID IS NULL OR l.CustomerID = @CustomerID)\r\n        GROUP BY l.CustomerID\r\n    )\r\n\r\n    -- Final SELECT: Join all CTEs and perform final transformations\r\n    SELECT\r\n        bc.CustomerID,\r\n        bc.FirstName,\r\n        bc.LastName,\r\n        bc.PrimaryEmail,\r\n        ISNULL(pa.HasMailingAddress, 0) AS HasMailingAddress,\r\n\r\n        -- Determine final OptIn status (Example: Default to Opted Out if no explicit preference)\r\n        ISNULL(cp.EmailOptInExplicit, 0) AS EmailOptInStatus,\r\n        ISNULL(cp.PostalOptInExplicit, 0) AS PostalOptInStatus,\r\n\r\n        lad.LastInteractionDate,\r\n        -- Calculate days since last interaction (handle NULL date)\r\n        CASE\r\n            WHEN lad.LastInteractionDate IS NOT NULL THEN DATEDIFF(day, lad.LastInteractionDate, @Today)\r\n            ELSE NULL -- Or a large number like 9999\r\n        END AS DaysSinceLastInteraction,\r\n\r\n        ISNULL(act.IsActiveCustomer, 0) AS IsActiveCustomer,\r\n        ISNULL(rmo.OpenedMarketingEmailRecently, 0) AS OpenedMarketingEmailRecently,\r\n\r\n        -- Derived Segment (Example)\r\n        CASE\r\n            WHEN ISNULL(act.IsActiveCustomer, 0) = 1 THEN 'Active Loan Holder'\r\n            WHEN lad.LastInteractionDate >= DATEADD(year, -1, @Today) THEN 'Recent Inactive'\r\n            WHEN lad.LastInteractionDate < DATEADD(year, -1, @Today) THEN 'Long-term Inactive'\r\n            ELSE 'Prospect/New' -- No interactions found\r\n        END AS CustomerSegment\r\n\r\n    FROM BaseCustomers bc\r\n    LEFT JOIN PrimaryAddresses pa ON bc.CustomerID = pa.CustomerID\r\n    LEFT JOIN LastActivityDates lad ON bc.CustomerID = lad.CustomerID\r\n    LEFT JOIN CommunicationPrefs cp ON bc.CustomerID = cp.CustomerID\r\n    LEFT JOIN RecentMarketingOpens rmo ON bc.CustomerID = rmo.CustomerID\r\n    LEFT JOIN ActiveStatus act ON bc.CustomerID = act.CustomerID\r\n    ORDER BY bc.LastName, bc.FirstName; -- Or CustomerID\r\n\r\nEND;\r\n"
    },
    {
        "name": "dbo.usp_GetLoanApplicationStatusDetails",
        "type": "PROCEDURE",
        "definition": "CREATE PROCEDURE usp_GetLoanApplicationStatusDetails\r\n    @LoanApplicationID INT\r\nAS\r\nBEGIN\r\n    SET NOCOUNT ON;\r\n\r\n    -- Check if the core application exists\r\n    IF NOT EXISTS (SELECT 1 FROM dbo.LoanApplications WHERE LoanApplicationID = @LoanApplicationID)\r\n    BEGIN\r\n        THROW 50010, 'Loan Application ID not found.', 1;\r\n        RETURN;\r\n    END\r\n\r\n    -- Retrieve application details joining related information\r\n    SELECT\r\n        -- Application Details\r\n        app.LoanApplicationID,\r\n        app.ApplicationDate,\r\n        app.RequestedAmount,\r\n        app.LoanPurpose,\r\n        app.Status AS ApplicationStatus,\r\n        app.SubmittedDate,\r\n        app.LastUpdatedDate,\r\n\r\n        -- Customer Details\r\n        cust.CustomerID,\r\n        cust.FirstName,\r\n        cust.LastName,\r\n        cust.Email AS CustomerEmail,\r\n\r\n        -- Loan Product Details (if associated)\r\n        prod.LoanProductID,\r\n        prod.Name AS LoanProductName,\r\n        prod.InterestRate AS StandardRate, -- Rate from the product definition\r\n        prod.TermMonths AS StandardTerm,   -- Term from the product definition\r\n\r\n        -- Latest Credit Score (assuming latest check is most relevant)\r\n        cs.Score AS LatestCreditScore,\r\n        cs.Provider AS CreditScoreProvider,\r\n        cs.DateChecked AS CreditScoreDateChecked,\r\n\r\n        -- Latest Income Verification Status (can have multiple, get latest)\r\n        inc.Source AS IncomeSource,\r\n        inc.VerifiedAmount AS VerifiedIncomeAmount, -- Corrected Column Name\r\n        inc.VerificationDate AS IncomeVerificationDate,\r\n        inc.Status AS IncomeVerificationStatus,\r\n        inc.MonthlyAmount AS VerifiedMonthlyIncome, --Added the monthly amount.\r\n\r\n        -- Approval/Rejection Decision (if made)\r\n        dec.Decision AS FinalDecision,\r\n        dec.DecisionDate,\r\n        dec.Reason AS DecisionReason,\r\n        dec.ApprovedAmount, -- Actual approved amount\r\n        dec.ApprovedRate,   -- Actual approved rate\r\n        dec.ApprovedTerm,   -- Actual approved term\r\n        dec.DecisionBy AS DecisionProcessorUserID\r\n\r\n    FROM\r\n        dbo.LoanApplications app\r\n    INNER JOIN\r\n        dbo.Customers cust ON app.CustomerID = cust.CustomerID\r\n    LEFT JOIN -- Application might not be linked to a specific product yet\r\n        dbo.LoanProducts prod ON app.ProposedLoanProductID = prod.LoanProductID -- Assuming ProposedLoanProductID exists on LoanApplications\r\n    LEFT JOIN -- Might not have a credit score check logged yet\r\n        dbo.CreditScores cs ON app.CustomerID = cs.CustomerID AND cs.CreditScoreID = (SELECT MAX(CreditScoreID) FROM dbo.CreditScores WHERE CustomerID = app.CustomerID) -- Get the latest score\r\n    LEFT JOIN -- Might not have income verification logged yet\r\n        dbo.IncomeVerifications inc ON app.CustomerID = inc.CustomerID AND inc.IncomeVerificationID = (SELECT MAX(IncomeVerificationID) FROM dbo.IncomeVerifications WHERE CustomerID = app.CustomerID) -- Get the latest income verification\r\n    LEFT JOIN -- Might not have a decision logged yet\r\n        dbo.ApprovalDecisions dec ON app.LoanApplicationID = dec.LoanApplicationID\r\n    WHERE\r\n        app.LoanApplicationID = @LoanApplicationID;\r\n\r\nEND;\r\n"
    },
    {
        "name": "dbo.usp_PerformLoanUnderwritingAnalysis",
        "type": "PROCEDURE",
        "definition": "CREATE PROCEDURE usp_PerformLoanUnderwritingAnalysis (\r\n    @LoanApplicationID INT\r\n)\r\nAS\r\nBEGIN\r\n    SET NOCOUNT ON;\r\n\r\n    --------------------------------------------------------------------------\r\n    -- Section 1: Input Validation and Initial Data Gathering\r\n    --------------------------------------------------------------------------\r\n    DECLARE @CustomerID INT, @RequestedAmount DECIMAL(18, 2), @LoanPurpose NVARCHAR(100),\r\n            @ProposedLoanProductID INT, @ApplicationStatus NVARCHAR(50), @LoanType NVARCHAR(50),\r\n            @RequiresCollateral BIT, @MinCreditScore INT, @MaxDTI DECIMAL(5, 2), @MaxLTV DECIMAL(5, 2);\r\n\r\n    -- Basic Application Info\r\n    SELECT\r\n        @CustomerID = la.CustomerID,\r\n        @RequestedAmount = la.RequestedAmount,\r\n        @LoanPurpose = la.LoanPurpose,\r\n        @ProposedLoanProductID = la.ProposedLoanProductID,\r\n        @ApplicationStatus = la.Status\r\n    FROM dbo.LoanApplications la\r\n    WHERE la.LoanApplicationID = @LoanApplicationID;\r\n\r\n    IF @CustomerID IS NULL\r\n    BEGIN\r\n        THROW 50020, 'Loan Application ID not found.', 1; RETURN;\r\n    END\r\n    IF @ApplicationStatus NOT IN ('Under Review', 'Pending Docs', 'Submitted') -- Example valid states\r\n    BEGIN\r\n        THROW 50021, 'Loan Application is not in a state suitable for underwriting analysis.', 1; RETURN;\r\n    END\r\n\r\n    -- Get Loan Product Rules\r\n    SELECT\r\n        @LoanType = lp.ProductType, -- e.g., 'Mortgage', 'Personal', 'Auto'\r\n        @RequiresCollateral = lp.RequiresCollateral,\r\n        @MinCreditScore = lp.MinCreditScoreRequired,\r\n        @MaxDTI = lp.MaxDTIPercent / 100.0, -- Assuming stored as percent, e.g., 43.00\r\n        @MaxLTV = lp.MaxLTVPercent / 100.0   -- Assuming stored as percent, e.g., 80.00\r\n    FROM dbo.LoanProducts lp\r\n    WHERE lp.LoanProductID = @ProposedLoanProductID;\r\n\r\n    IF @LoanType IS NULL\r\n    BEGIN\r\n        THROW 50022, 'Associated Loan Product details not found or application not linked.', 1; RETURN;\r\n    END\r\n\r\n    -- Create Temp Tables/Table Variables for storing analysis results\r\n    DECLARE @AnalysisResults TABLE (\r\n        CheckCategory VARCHAR(50),\r\n        CheckName VARCHAR(100),\r\n        ResultCode VARCHAR(20), -- 'PASS', 'FAIL', 'WARN', 'INFO', 'N/A'\r\n        Details NVARCHAR(500),\r\n        NumericValue DECIMAL(18, 4) NULL\r\n    );\r\n\r\n    --------------------------------------------------------------------------\r\n    -- Section 2: Credit Analysis\r\n    --------------------------------------------------------------------------\r\n    DECLARE @LatestCreditScore INT, @CreditScoreDate DATE, @BankruptciesLast5Yrs INT, @DelinquenciesLast2Yrs INT;\r\n\r\n    -- Get latest credit score (could be more complex, averaging multiple bureaus)\r\n    SELECT TOP 1\r\n        @LatestCreditScore = cs.Score,\r\n        @CreditScoreDate = cs.DateChecked,\r\n        @BankruptciesLast5Yrs = cs.BankruptciesLast5Years, -- Assuming these fields exist\r\n        @DelinquenciesLast2Yrs = cs.DelinquenciesLast2Years\r\n    FROM dbo.CreditScores cs\r\n    WHERE cs.CustomerID = @CustomerID\r\n    ORDER BY cs.DateChecked DESC;\r\n\r\n    INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Credit', 'Credit Score Check Date', IIF(@CreditScoreDate IS NOT NULL, 'INFO', 'FAIL'), 'Latest score checked on: ' + ISNULL(CONVERT(VARCHAR, @CreditScoreDate, 120), 'N/A'), NULL);\r\n\r\n    IF @CreditScoreDate IS NULL\r\n    BEGIN\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Credit', 'Credit Score Available', 'FAIL', 'No credit score found for customer.', NULL);\r\n    END\r\n    ELSE\r\n    BEGIN\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Credit', 'Credit Score Available', 'PASS', 'Score: ' + CAST(@LatestCreditScore AS VARCHAR), @LatestCreditScore);\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Credit', 'Min Score Requirement', IIF(@LatestCreditScore >= @MinCreditScore, 'PASS', 'FAIL'), 'Product requires min score of ' + CAST(@MinCreditScore AS VARCHAR), @LatestCreditScore);\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Credit', 'Bankruptcies (Last 5Y)', IIF(@BankruptciesLast5Yrs = 0, 'PASS', 'WARN'), 'Count: ' + CAST(@BankruptciesLast5Yrs AS VARCHAR), @BankruptciesLast5Yrs);\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Credit', 'Delinquencies (Last 2Y)', IIF(@DelinquenciesLast2Yrs <= 1, 'PASS', 'WARN'), 'Count: ' + CAST(@DelinquenciesLast2Yrs AS VARCHAR), @DelinquenciesLast2Yrs); -- Example rule: <=1 is acceptable\r\n    END\r\n    -- Add more credit checks (public records, inquiries, credit utilization etc.) ... makes it larger\r\n\r\n    --------------------------------------------------------------------------\r\n    -- Section 3: Income & Employment Analysis\r\n    --------------------------------------------------------------------------\r\n    DECLARE @VerifiedMonthlyIncome DECIMAL(18, 2), @IncomeVerifiedDate DATE, @IncomeVerificationStatus VARCHAR(20);\r\n    DECLARE @EmploymentStatus VARCHAR(50), @MonthsInCurrentJob INT, @EmploymentVerifiedDate DATE;\r\n\r\n    SELECT TOP 1\r\n        @VerifiedMonthlyIncome = iv.MonthlyAmount, -- Assuming MonthlyAmount field exists\r\n        @IncomeVerifiedDate = iv.VerificationDate,\r\n        @IncomeVerificationStatus = iv.Status\r\n    FROM dbo.IncomeVerifications iv\r\n    WHERE iv.CustomerID = @CustomerID\r\n    ORDER BY iv.VerificationDate DESC;\r\n\r\n    SELECT TOP 1\r\n        @EmploymentStatus = eh.EmploymentStatus, -- e.g., 'Employed', 'Self-Employed'\r\n        @MonthsInCurrentJob = DATEDIFF(month, eh.StartDate, GETDATE()),\r\n        @EmploymentVerifiedDate = eh.VerificationDate -- Assuming EmploymentHistory table exists\r\n    FROM dbo.EmploymentHistory eh\r\n    WHERE eh.CustomerID = @CustomerID AND eh.IsCurrent = 1\r\n    ORDER BY eh.VerificationDate DESC;\r\n\r\n    IF @IncomeVerificationStatus IS NULL OR @IncomeVerificationStatus != 'Verified'\r\n    BEGIN\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Income', 'Income Verified', 'FAIL', 'Income status: ' + ISNULL(@IncomeVerificationStatus, 'Not Found'), NULL);\r\n    END\r\n    ELSE\r\n    BEGIN\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Income', 'Income Verified', 'PASS', 'Verified Amount: ' + FORMAT(@VerifiedMonthlyIncome, 'C', 'en-US') + '/month on ' + CONVERT(VARCHAR, @IncomeVerifiedDate, 120), @VerifiedMonthlyIncome);\r\n    END\r\n\r\n    IF @EmploymentStatus IS NULL OR @EmploymentVerifiedDate IS NULL -- Add check for date recency\r\n    BEGIN\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Employment', 'Employment Verified', 'FAIL', 'Current employment not verified or verification outdated.', NULL);\r\n    END\r\n    ELSE\r\n    BEGIN\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Employment', 'Employment Verified', 'PASS', 'Status: ' + @EmploymentStatus + ', Verified: ' + CONVERT(VARCHAR, @EmploymentVerifiedDate, 120), NULL);\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Employment', 'Job Stability (Months)', IIF(@MonthsInCurrentJob >= 12, 'PASS', 'WARN'), 'Months in current job: ' + CAST(@MonthsInCurrentJob AS VARCHAR), @MonthsInCurrentJob); -- Example rule: min 12 months\r\n    END\r\n    -- Add checks for income stability, source validation etc. ... makes it larger\r\n\r\n    --------------------------------------------------------------------------\r\n    -- Section 4: Debt & DTI Calculation\r\n    --------------------------------------------------------------------------\r\n    DECLARE @TotalExistingMonthlyDebt DECIMAL(18, 2) = 0;\r\n    DECLARE @ProposedMonthlyPayment DECIMAL(18, 2);\r\n    DECLARE @CalculatedDTI DECIMAL(5, 4); -- Store as ratio e.g. 0.43\r\n\r\n    -- Sum payments from existing *active* loans for this customer\r\n    SELECT @TotalExistingMonthlyDebt = SUM(ISNULL(l.MonthlyPaymentAmount, 0)) -- Assuming MonthlyPaymentAmount exists on Loans table\r\n    FROM dbo.Loans l\r\n    WHERE l.CustomerID = @CustomerID\r\n      AND l.Status = 'Active'; -- Or other relevant statuses\r\n\r\n    -- Calculate proposed payment (Simplified P&I using PMT formula logic - complex in TSQL)\r\n    -- This function `dbo.CalculateMonthlyPayment` would need to be created separately.\r\n    -- It would take Principal, Annual Rate (as decimal), Term in Months.\r\n    -- SET @ProposedMonthlyPayment = dbo.CalculateMonthlyPayment(@RequestedAmount, @LoanProductRate / 100.0, @LoanProductTerm);\r\n    -- *** Placeholder Calculation (Replace with actual PMT logic or function call) ***\r\n    IF @ProposedLoanProductID IS NOT NULL -- Needs rate and term from product\r\n    BEGIN\r\n        DECLARE @ProductRate DECIMAL(5,4), @ProductTerm INT\r\n        SELECT @ProductRate = InterestRate / 100.0, @ProductTerm = TermMonths FROM dbo.LoanProducts WHERE LoanProductID = @ProposedLoanProductID\r\n        IF @ProductRate > 0 AND @ProductTerm > 0 -- Basic check for valid calculation parameters\r\n             SET @ProposedMonthlyPayment = (@RequestedAmount * (@ProductRate/12.0) * POWER(1 + (@ProductRate/12.0), @ProductTerm)) / (POWER(1 + (@ProductRate/12.0), @ProductTerm) - 1)\r\n        ELSE SET @ProposedMonthlyPayment = NULL; -- Cannot calculate\r\n    END\r\n\r\n    INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Debt', 'Existing Monthly Debt', 'INFO', FORMAT(@TotalExistingMonthlyDebt, 'C', 'en-US'), @TotalExistingMonthlyDebt);\r\n    INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Debt', 'Proposed Monthly Payment', IIF(@ProposedMonthlyPayment IS NOT NULL, 'INFO', 'FAIL'), FORMAT(@ProposedMonthlyPayment, 'C', 'en-US'), @ProposedMonthlyPayment);\r\n\r\n    -- Calculate DTI\r\n    IF @VerifiedMonthlyIncome > 0 AND @ProposedMonthlyPayment IS NOT NULL\r\n    BEGIN\r\n        SET @CalculatedDTI = (@TotalExistingMonthlyDebt + @ProposedMonthlyPayment) / @VerifiedMonthlyIncome;\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Debt', 'Debt-to-Income (DTI) Ratio', IIF(@CalculatedDTI <= @MaxDTI, 'PASS', 'FAIL'), 'Calculated DTI: ' + FORMAT(@CalculatedDTI, 'P2'), @CalculatedDTI);\r\n    END\r\n    ELSE\r\n    BEGIN\r\n        SET @CalculatedDTI = NULL;\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Debt', 'Debt-to-Income (DTI) Ratio', 'FAIL', 'Cannot calculate DTI (Missing Income or Proposed Payment)', NULL);\r\n    END\r\n    -- Add checks for revolving debt utilization, etc. ... makes it larger\r\n\r\n    --------------------------------------------------------------------------\r\n    -- Section 5: Collateral & LTV Calculation (If Applicable)\r\n    --------------------------------------------------------------------------\r\n    DECLARE @CollateralValue DECIMAL(18, 2), @CollateralVerifiedDate DATE, @CollateralType VARCHAR(50);\r\n    DECLARE @CalculatedLTV DECIMAL(5, 4); -- Store as ratio e.g. 0.80\r\n\r\n    IF @RequiresCollateral = 1\r\n    BEGIN\r\n        SELECT TOP 1\r\n            @CollateralValue = c.EstimatedValue,\r\n            @CollateralVerifiedDate = c.VerificationDate,\r\n            @CollateralType = c.Description\r\n        FROM dbo.Collaterals c\r\n        WHERE c.LoanApplicationID = @LoanApplicationID -- Assuming link is direct\r\n        ORDER BY c.VerificationDate DESC;\r\n\r\n        IF @CollateralValue IS NULL OR @CollateralVerifiedDate IS NULL -- Add check for date recency\r\n        BEGIN\r\n            INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Collateral', 'Collateral Verified', 'FAIL', 'Required collateral not found or not verified recently.', NULL);\r\n            SET @CalculatedLTV = NULL;\r\n        END\r\n        ELSE\r\n        BEGIN\r\n             INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Collateral', 'Collateral Verified', 'PASS', 'Type: ' + @CollateralType + ', Value: ' + FORMAT(@CollateralValue, 'C', 'en-US') + ', Verified: ' + CONVERT(VARCHAR, @CollateralVerifiedDate, 120), @CollateralValue);\r\n             IF @CollateralValue > 0\r\n             BEGIN\r\n                 SET @CalculatedLTV = @RequestedAmount / @CollateralValue;\r\n                 INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Collateral', 'Loan-to-Value (LTV) Ratio', IIF(@CalculatedLTV <= @MaxLTV, 'PASS', 'FAIL'), 'Calculated LTV: ' + FORMAT(@CalculatedLTV, 'P2'), @CalculatedLTV);\r\n             END\r\n             ELSE\r\n             BEGIN\r\n                 SET @CalculatedLTV = NULL;\r\n                 INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Collateral', 'Loan-to-Value (LTV) Ratio', 'FAIL', 'Cannot calculate LTV (Collateral value is zero or missing)', NULL);\r\n             END\r\n        END\r\n    END\r\n    ELSE\r\n    BEGIN\r\n        INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Collateral', 'Collateral Requirement', 'N/A', 'Loan product does not require collateral.', NULL);\r\n    END\r\n    -- Add checks for collateral type eligibility, condition reports, title search etc. ... makes it larger\r\n\r\n    --------------------------------------------------------------------------\r\n    -- Section 6: Policy & Fraud Checks\r\n    --------------------------------------------------------------------------\r\n    -- Example Checks (can be expanded significantly)\r\n    INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details) VALUES ('Policy', 'Loan Purpose Eligibility', IIF(@LoanPurpose IN ('Debt Consolidation', 'Home Improvement', 'Vehicle Purchase'), 'PASS', 'WARN'), 'Purpose: ' + @LoanPurpose); -- Based on allowed purposes\r\n    INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details) VALUES ('Policy', 'Max Loan Amount', IIF(@RequestedAmount <= 100000, 'PASS', 'WARN'), 'Requested: ' + FORMAT(@RequestedAmount, 'C', 'en-US')); -- Example overall limit\r\n\r\n    DECLARE @FraudFlagCount INT = 0;\r\n    -- SELECT @FraudFlagCount = COUNT(*) FROM dbo.FraudFlags ff WHERE ff.CustomerID = @CustomerID AND ff.IsActive = 1; -- Simulate check\r\n    INSERT INTO @AnalysisResults (CheckCategory, CheckName, ResultCode, Details, NumericValue) VALUES ('Fraud', 'Active Fraud Flags', IIF(@FraudFlagCount = 0, 'PASS', 'FAIL'), 'Count: ' + CAST(@FraudFlagCount AS VARCHAR), @FraudFlagCount);\r\n    -- Add KYC checks, OFAC checks, duplicate application checks etc. ... makes it larger\r\n\r\n    --------------------------------------------------------------------------\r\n    -- Section 7: Overall Assessment & Output\r\n    --------------------------------------------------------------------------\r\n    DECLARE @OverallAssessment VARCHAR(50) = 'Refer to Underwriter'; -- Default\r\n    DECLARE @FailCount INT = 0;\r\n    SELECT @FailCount = COUNT(*) FROM @AnalysisResults WHERE ResultCode = 'FAIL';\r\n\r\n    IF @FailCount = 0\r\n    BEGIN\r\n        -- Could add logic based on WARN count or specific check results\r\n        SET @OverallAssessment = 'Preliminary Approval Recommended';\r\n    END\r\n    ELSE\r\n    BEGIN\r\n         SET @OverallAssessment = 'Rejection Recommended / Needs Review';\r\n    END\r\n\r\n    -- Output Result Set 1: Overall Summary\r\n    SELECT\r\n        @LoanApplicationID AS LoanApplicationID,\r\n        @CustomerID AS CustomerID,\r\n        (SELECT FirstName + ' ' + LastName FROM dbo.Customers WHERE CustomerID = @CustomerID) AS CustomerName,\r\n        @RequestedAmount AS RequestedAmount,\r\n        @LoanPurpose AS LoanPurpose,\r\n        @LoanType AS LoanType,\r\n        @OverallAssessment AS OverallAssessment,\r\n        (SELECT COUNT(*) FROM @AnalysisResults WHERE ResultCode = 'FAIL') AS FailCount,\r\n        (SELECT COUNT(*) FROM @AnalysisResults WHERE ResultCode = 'WARN') AS WarnCount\r\n    ;\r\n\r\n    -- Output Result Set 2: Detailed Check Results\r\n    SELECT CheckCategory, CheckName, ResultCode, Details, NumericValue FROM @AnalysisResults ORDER BY CheckCategory, CheckName;\r\n\r\n    -- Optionally: Log the detailed analysis results to an audit table\r\n    -- DECLARE @ResultsXML XML = (SELECT CheckCategory, CheckName, ResultCode, Details, NumericValue FROM @AnalysisResults FOR XML PATH('Check'), ROOT('Analysis'));\r\n    -- INSERT INTO dbo.AuditLog (TableName, RecordID, ActionType, ChangeDetails) VALUES ('UnderwritingAnalysis', @LoanApplicationID, 'Analysis Ran', @ResultsXML);\r\n\r\nEND;\r\n"
    }
]